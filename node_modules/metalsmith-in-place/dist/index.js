'use strict';

var Jstransformer = require('metalsmith-engine-jstransformer');
var match = require('multimatch');

var plugin = function plugin() {
  for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    rest[_key - 1] = arguments[_key];
  }

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var pattern = options.pattern || '**';
  var Engine = options.engine || Jstransformer;
  var engineOptions = options.engineOptions || {};

  return function (files, metalsmith, done) {
    if (rest.length > 0) {
      done(new Error('invalid options, this plugin expects a single options object.'));
    }

    if (typeof pattern !== 'string') {
      done(new Error('invalid pattern, the pattern option should be a string.'));
    }

    if (typeof Engine !== 'function') {
      done(new Error('invalid engine, the engine should be a constructor.'));
    }

    var engine = new Engine(files, metalsmith, engineOptions);

    if (!engine.render) {
      done(new Error('invalid engine, the engine instance should have a render method.'));
    }

    if (typeof engine.render !== 'function') {
      done(new Error('invalid engine, the render property should be a function.'));
    }

    // Map all files that should be processed to an array of promises
    var promises = Object.keys(files).filter(function (filename) {
      return match(filename, pattern)[0];
    }).map(function (filename) {
      return engine.render(filename);
    });

    // Call done callback when all promises are resolved
    Promise.all(promises).then(function () {
      return done();
    }).catch(function (error) {
      return done(error);
    });
  };
};

module.exports = plugin;